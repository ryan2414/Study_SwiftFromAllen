import UIKit

/*:
# 앨런 - Swift 마스터 스쿨 22기
*/
/*:
## 다섯번째 테스트 (6주차)
---
*/
/**>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
 그동안 배운 내용의 복습 및 약간의 응용이 들어가 있을 뿐입니다. 이 문제를 잘 풀 수 있다고
 좋은 개발자가 될 수 있는 것도 아니고, 실망하거나 좌절할 필요도 없습니다.
 우린 이제 시작일 뿐입니다. 😄
 가장 중요한 것은 포기하지 않고, 꾸준함을 유지하는 것일뿐!
 안풀리면, 다음 문제로 넘어가면되고, 이번에 못풀면 잘 공부해서, 다음 번에 똑같은 문제를 잘 풀면됩니다.
 >>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>**/

// 서술형의 경우, 주석처리를 하고 작성하면 됩니다.
// (시간이 약간 모자랄 수도 있을 것 같긴한데, 되는 대로 풀어서, 슬랙 DM으로 전달해 주세요!)

// 꼭 정해진 시간 이외에도 풀어보시는대로 전달해 주시면,
// 제가 대략적으로 실력을 파악하는데 도움이 됩니다. (조언도 드릴 수 있고요!)





/**==================================================================
 [1번 문제]
  - 아래의 코드 예제에서, Bclass는 Aclass를 상속하고 있습니다. Bclass의 저장속성인
    z를 고려해서, Bclass의 지정생성자를 한개이상 구현하고, 상위(Aclass)의 지정생성자
    (init(x: Int, y: Int))를 편의생성자로 재정의 해보세요.
    (자유롭게 구현해보세요.)
 ===================================================================**/


class Aclass {
    var x: Int
    var y: Int
    
    init(x: Int, y: Int) {
        self.x = x
        self.y = y
    }
    
    convenience init() {
        self.init(x: 0, y: 0)
    }
}





// 아래의 주석을 제거하고 코드를 구현

class Bclass: Aclass {

    var z: Int

    init(x: Int, y: Int, z: Int) {
        self.z = z
        super.init(x:x, y:y)
    }
    
    override convenience init(x: Int, y: Int) {
        self.init(x: x, y: y, z: 0)
    }


}






/**==================================================================
 [2번 문제]
  - 클래스에서 convenience(편의) 생성자는 어떤 개념인가요? 아는대로 간단하게 서술하세요.
 ===================================================================**/


// 지정생성자 보다 적은 갯수의 파라미터로 초기화 하는 생성자








/**==================================================================
 [3번 문제]
  - 아래의 SubClass에서, 상위의 SuperClass의 sayHello 메서드를 재정의해서,
    아래 처럼 출력되도록 구현해 보세요.
 
    "안녕하세요."   // super호출 코드로 구현
    "반갑습니다."
    "잘 부탁드려요."
 ===================================================================**/


class SuperClass {
    func sayHello() {
        print("안녕하세요.")
    }
}



class SubClass: SuperClass {
    // 메서드 재정의 코드 구현
    override func sayHello() {
        super.sayHello()
        print("반갑습니다. \n잘부탁드려요.")
    }
    
}


// 코드 실행
var subClass = SubClass()
subClass.sayHello()


// 원하는 출력
// "안녕하세요."
// "반갑습니다."
// "잘 부탁드려요."







/**==================================================================
 [4번 문제]
  - 스위프트의 기본 타입인 Int(정수형)를 확장해서, 언제든지 정수 인스턴스를 제곱(square)
    하는 함수를 만드려고 합니다. 아래, square함수의 내부 구현을 완성해 보세요.
    (개념: 확장에서, 메서드 구현)
 ===================================================================**/

// 제곱하는 메서드 만들어 보기

extension Int {
    // 아래 제곱(square) 함수의 내부 구현을 완성 하세요.
    func square() -> Self {
        return self * self
    }
}


// 제대로 구현했는지 확인하는 코드
var someInt = 5

print(someInt.square())
// (제대로 구현했다면) 5를 제곱하면, 결과로 25가 출력되면 됩니다.





/**==================================================================
 [5번 문제]
  - 아래 Hero 클래스가 구현되어 있습니다. 해당 Hero클래스는 이름(name)과 아이디(id)로
    인스턴스를 생성할 수 있는데, 해당 클래스를 확장(Extension)해서,
    이름만으로도 인스턴스를 생성할 수 있는.. (확장에서) 생성자를 구현하세요.
    (아이디는 0으로 셋팅되도록 구현하시면 됩니다.)
    (힌트. 확장에서, 생성자의 구현에서, 주의할점은...?)
 ===================================================================**/



class Hero {
    var name: String
    var id: Int
    
    init(name: String, id: Int) {
        self.name = name
        self.id = id
    }
}

extension Hero {
    // 이 부분을 이름만 가지고 생성할 수 있는 생성자로 구현 하세요.
    convenience init (name: String) {
        self.init(name: name, id: 0)
    }
}


var hero1 = Hero(name: "아이언맨", id: 0)
var hero2 = Hero(name: "캡틴아메리카", id: 1)
var hero3 = Hero(name: "헐크", id: 2)



// 위의 확장에서, 생성자를 제대로 구현하면 아래의 코드가 사용 가능해 집니다.
var hero4 = Hero(name: "토르")
var hero5 = Hero(name: "스파이더맨")






/**==================================================================
 [6번 문제]
  - 메서드 디스패치(Method Dispatch)가 어떤 개념인가요? 아는대로 서술하세요.
    (1) Direct 디스패치, (2) Dynamic 디스패치 두가지의 차이점을 중심으로 설명하세요.
 ===================================================================**/


// 메서드 디스패치란 함수를 실행 시키는 방법으로
// Direct 디스패치의 경우 컴파일 시점에 코드 자체에 함수의 메모리 주소 또는 함수의 명령 코드를 해당 위치에 심음
// Dynamic 디스패치의 경우 동적 디스패치로 함수의 포인터를 배열 형태로 보관 후 실행









/**==================================================================
 [7번 문제]
  - 아래의 조건을 만족하는 RemoteControl 프로토콜의 구현을 완성해 보세요.
    (조건)
    (1) name 속성(타입: String)을 요구사항으로 선언
        (최소한의 요구사항은 읽기 속성 강제하기)
    (2) turnOn 메서드를 요구사항으로 선언
        (input: 없음, output: Bool)
    (3) turnOff 메서드를 요구사항으로 선언
        (input: (num: Int), output: Bool)
 ===================================================================**/

// RemoteControl 프로토콜
protocol RemoteControl {
    // 이 내부의 코드를 완성하시면 됩니다.
    var name: String { get }
    func turnOn() -> Bool
    func turnOff() -> Bool
    
}







/**==================================================================
 [8번 문제]
  - 프로토콜(Protocol)의 확장(Extension)이 어떤 개념인가요? 아는대로 간단하게 서술하세요.
 ===================================================================**/

// 프로토콜의 확장은 중복되는 작업을 줄이려고 사용한다. (default 세팅)












/**==================================================================
 [9번 문제]
  - 프로토콜(Protocol)지향 프로그래밍이 어떤 개념인가요? 아는대로 간단하게 서술하세요.
 ===================================================================**/

// 프로토콜을 활용하여 다양한 형태로 변환 가능한 다형성을 사용하는 것.
// 의존성 주입을 통한 결합도를 줄임













/**==================================================================
 [10번 문제]
  - 스위프트에서, 함수를 1급 객체로 취급한다는 의미가 어떤 의미인가요? 아는대로 설명하세요.
 ===================================================================**/

// 함수를 변수에 할당 가능, 인자로 전달 가능.










/**==================================================================
 [11번 문제]
  - 콜백(Call back)함수가 뭔가요? 개념을 간단하게 서술하세요.
 ===================================================================**/

// 특정 조건에 호출이 되는 함수.










/**==================================================================
 [12번 문제]
  - 고차함수를 사용해서, 아래 array배열에서, 5보다 큰 짝수를 뽑아내세요. 해당 뽑아낸
    숫자들을 evenNumbersArray 변수에 담으면 됩니다.
    (힌트. 고차함수 두번 사용 가능)
 ===================================================================**/

let array = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14]


// 아래, array 배열에 고차함수 사용하는 코드 완성하세요.
var evenNumbersArray = array.filter {
    $0 > 5
}


// 이 코드는 출력(확인)을 위한 코드 입니다.
print(evenNumbersArray)




/**==================================================================
 [13번 문제]
  - 고차함수를 사용해서, 아래 numbersArray배열에서, 홀수만 제곱해서, 그 숫자를 다
    더한 값을 도출하는 코드를 완성하세요.
    numbersArray 배열에서 고차함수를 조합해서, 새로운 결과를 newResult 변수에
    넣으시면 됩니다.
 ===================================================================**/


var numbersArray = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]



var newResult = numbersArray.filter { $0 % 2 == 1 }.map { $0 * $0 }.reduce(0) { $0 + $1 }
                    

// 이 코드는 출력(확인)을 위한 코드 입니다.
print(newResult)
// 165






/**==================================================================
 [14번 문제]
  - 아래 Student구조체가 정의되어 있고, 해당 구조체의 인스턴스를 담고 있는
    someMembers 배열이 있습니다. someMembers 배열에서, 고차함수 방식을 이용해서
    친구의 이름이 "아이브"를 가진 멤버만 뽑아내서, 출력을 해보세요.
 
  - 힌트. (1) someMembers.고차함수 사용  (2) contains 메서드
 
  - 고차함수로 잘 완성을 했다면, 그 아래 newMembers.map { print($0.name) }
    이 부분을 통해서, "잡스", "팀쿡" 이 두명의 이름을 정상적으로 출력을 할 수 있습니다.
 ===================================================================**/


struct Student {
    let name: String
    let studentId: Int
    let friendsName: [String]
}


let someMembers: [Student] = [
    Student(name: "잡스", studentId: 0, friendsName: ["팀쿡", "아이브"]),
    Student(name: "팀쿡", studentId: 0, friendsName: ["잡스", "아이브"]),
    Student(name: "주커버그", studentId: 0, friendsName: ["빌게이츠", "마이클"]),
    Student(name: "베조스", studentId: 0, friendsName: ["빌게이츠", "존"])
]



// 아래, someClassMembers 배열에 고차함수 사용하는 코드 완성하세요.
var newMembers = someMembers.filter { $0.friendsName.contains("아이브") }



// 이 코드는 출력(확인)을 위한 코드 입니다.
newMembers.map { print($0.name) }

// 잡스
// 팀쿡




/**==================================================================
 [15번 문제]
  - 함수형 프로그래밍이 어떤 개념인가요? 아는대로, 간단하게 서술하세요.
 ===================================================================**/

// 함수형 프로그래밍이란 미리 주어진 함수를 통하여 프로그램을 좀더 효울적으로 짜는 것 












/**>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
 수고 하셨습니다. 😄
 >>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>**/
